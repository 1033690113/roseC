<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Express+Multer图片上传</title>
    <link href="/2021/02/06/Express+Multer%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    <url>/2021/02/06/Express+Multer%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<p>项目中总会需要文件上传的功能，实现这个功能的时候，我有下面两个思路:  </p><ol><li>将图片转为base64，再将base64码存入数据库，调用的时候直接渲染即可</li><li>将图片上传到服务器作为静态资源暴露出来，再将图片的访问链接存入数据库，调用的时候使用该链接去访问  </li></ol><p>我们来分析一下上面两种方法:</p><ol><li>使用base64，可以减少http请求，获取请求结果后直接编码渲染，但是也有弊端，base64一般会比原图要大一些，且浏览器需要解码才能显示图片</li><li>第二张方法获取请求结果后，需要将请求结果中的图片链接拿来，再发送请求，之后渲染图片  </li></ol><p>权衡利弊下，我选择了第二种方法进行图片上传</p><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>node + express</p><h3 id="依赖插件：Multer"><a href="#依赖插件：Multer" class="headerlink" title="依赖插件：Multer"></a>依赖插件：Multer</h3><p>Multer 是一个 node.js 中间件，用于处理 multipart/form-data 类型的表单数据（请求头”Content-Type”: “multipart/form-data;”），它主要用于上传文件。<br>Multer 会添加一个 body 对象 以及 file 或 files 对象 到 express 的 request 对象中。 body 对象包含表单的文本域信息，file 或 files 对象包含对象表单上传的文件信息。</p><h3 id="废话不多说，直接贴代码"><a href="#废话不多说，直接贴代码" class="headerlink" title="废话不多说，直接贴代码"></a>废话不多说，直接贴代码</h3><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><pre><code class="hljs bash">&lt;script src=<span class="hljs-string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;file&quot;</span> id=<span class="hljs-string">&quot;up&quot;</span> multiple /&gt;&lt;script&gt;var up = document.getElementById(<span class="hljs-string">&quot;up&quot;</span>)up.onchange = <span class="hljs-keyword">function</span>(res) &#123;<span class="hljs-built_in">let</span> fs = up.files;var forms = new FormData()forms.append(<span class="hljs-string">&#x27;file&#x27;</span>, fs[0])console.log(fs[0])axios(&#123;url: <span class="hljs-string">&#x27;http://服务器地址:3000/upload&#x27;</span>,method: <span class="hljs-string">&#x27;post&#x27;</span>,headers: &#123;<span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;multipart/form-data;&quot;</span>&#125;,data: forms,success: (res) =&gt; &#123;console.log(res)&#125;&#125;).<span class="hljs-keyword">then</span>(res =&gt; &#123;console.log(res)&#125;)&#125;&lt;/script&gt;</code></pre><h4 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h4><pre><code class="hljs bash">const express = require(<span class="hljs-string">&#x27;express&#x27;</span>)const app = express()const multer = require(<span class="hljs-string">&#x27;multer&#x27;</span>)const port = 3000 // 端口号// 文件操作const fs = require(<span class="hljs-string">&#x27;fs&#x27;</span>)const path = require(<span class="hljs-string">&#x27;path&#x27;</span>)// 使用multer插件，设置文件上传的路径const upload = multer(&#123;dest: <span class="hljs-string">&#x27;data/&#x27;</span>&#125;);// 配置静态资源路径app.use(express.static(path.join(__dirname, <span class="hljs-string">&#x27;data&#x27;</span>)));// 解决跨域app.all(<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-keyword">function</span>(req, res, next) &#123;res.header(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);res.header(<span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="hljs-string">&#x27;Content-Type&#x27;</span>);res.header(<span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);res.header(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/json;charset=utf-8&#x27;</span>);next();&#125;);// 处理post图片上传上来的数据app.post(<span class="hljs-string">&#x27;/upload&#x27;</span>, upload.any(), <span class="hljs-keyword">function</span>(req, res, next) &#123;console.log(req.files[0]); // 上传的文件信息var des_file = <span class="hljs-string">&quot;./data/&quot;</span> + req.files[0].originalname;// req.files[0].path即 multer设置的文件上传的路径fs.readFile(req.files[0].path, <span class="hljs-keyword">function</span>(err, data) &#123;fs.writeFile(des_file, data, <span class="hljs-keyword">function</span>(err) &#123;<span class="hljs-keyword">if</span> (err) &#123;console.log(err);&#125; <span class="hljs-keyword">else</span> &#123;response = &#123;message: <span class="hljs-string">&#x27;File uploaded successfully&#x27;</span>,filename: req.files[0].originalname&#125;;console.log(response);res.send(&#123;data: JSON.stringify(response),info: <span class="hljs-string">&quot;aaaa&quot;</span>&#125;);// 删除原来multer存的文件fs.unlinkSync(req.files[0].path)&#125;&#125;);&#125;);&#125;);app.listen(port, () =&gt; console.log(`服务器启动成功，端口号为： <span class="hljs-variable">$&#123;port&#125;</span>!`))</code></pre>]]></content>
    
    
    <categories>
      
      <category>后台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
      <tag>Express</tag>
      
      <tag>multer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript深浅拷贝问题</title>
    <link href="/2021/01/07/Javascript%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E9%97%AE%E9%A2%98/"/>
    <url>/2021/01/07/Javascript%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="想要实现这样一个功能："><a href="#想要实现这样一个功能：" class="headerlink" title="想要实现这样一个功能："></a>想要实现这样一个功能：</h3><p>进入添加数据页面，想添加一些数据，可是写到一半想退出添加数据页面，这时候数据需要回退为之前的旧数据</p><p>代码逻辑如下：</p><pre><code class="hljs bash"><span class="hljs-comment"># 原数据</span><span class="hljs-built_in">let</span> info = &#123;name: <span class="hljs-string">&quot;Mike&quot;</span>,age: 15&#125;<span class="hljs-comment"># 更改</span><span class="hljs-comment"># 1.保存旧数据</span><span class="hljs-built_in">let</span> <span class="hljs-built_in">history</span> = info<span class="hljs-comment"># 2.更改新数据</span><span class="hljs-built_in">let</span> info = &#123;name: <span class="hljs-string">&quot;new name&quot;</span>,age: <span class="hljs-string">&quot;new age&quot;</span>&#125;<span class="hljs-comment"># 3.退出，将数据指向history</span><span class="hljs-built_in">let</span> info = <span class="hljs-built_in">history</span><span class="hljs-comment"># 输出现在的数据</span>console.log(info)  <span class="hljs-comment"># &#123;name:&quot;new name&quot;,age:&quot;new age&quot;&#125;</span></code></pre><h3 id="这时候会发现这样的问题："><a href="#这时候会发现这样的问题：" class="headerlink" title="这时候会发现这样的问题："></a>这时候会发现这样的问题：</h3><p>即使在更改数据前，将旧数据(info)指向一个中间变量(history)，在更改旧数据(info)后，这个中间变量(history)也跟随改变了，并没有起到保存的作用</p><h2 id="问题的原因"><a href="#问题的原因" class="headerlink" title="问题的原因"></a>问题的原因</h2><p>经过上面这么长的铺垫，终于可以进入我们的正题，也是出现上面问题的原因：</p><h3 id="javascript变量"><a href="#javascript变量" class="headerlink" title="javascript变量"></a>javascript变量</h3><p>javascript的变量有两种：<br>1.原始值：简单的数据，按值访问<br>2.引用值：多个数据构成的对象，按引用访问</p><p>复制原始值时，就是将值复制一份，例如：</p><pre><code class="hljs bash"><span class="hljs-built_in">let</span> a = 123<span class="hljs-built_in">let</span> b = aconsole.log(a,b) <span class="hljs-comment"># 123,123</span></code></pre><p><img src="/2021/01/07/Javascript%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E9%97%AE%E9%A2%98/p1.png" alt="原始值复制"></p><p>复制引用值时，是将值的引用指向新的变量，数据堆中并没有新的数据出现，例如：</p><pre><code class="hljs bash"><span class="hljs-built_in">let</span> a = &#123;name: 123,age: 456&#125;<span class="hljs-built_in">let</span> b = aconsole.log(a,b) <span class="hljs-comment">#&#123;name: 123, age: 456&#125;，&#123;name: 123, age: 456&#125;</span>a.name = 789console.log(a,b) <span class="hljs-comment">#&#123;name: 789, age: 456&#125;，&#123;name: 789, age: 456&#125;</span></code></pre><p>因为更改的都是数据堆里的值，所以指向该对象的变量数据都会随之改变<br><img src="/2021/01/07/Javascript%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E9%97%AE%E9%A2%98/p2.png" alt="引用值复制"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>这里我们可以使用深拷贝的方法来改变引用值的复制，原理如下：<br>将对象转换为json字符串形式（String类型在Javascript中是原始值），再将该值赋值给新变量，再将该变量转换为原生js对象</p><pre><code class="hljs bash">deepClone(obj)&#123;<span class="hljs-built_in">let</span> _tmp = JSON.stringify(obj); //将对象转换为json字符串形式<span class="hljs-built_in">let</span> result = JSON.parse(_tmp); //将转换而来的字符串转换为原生js对象<span class="hljs-built_in">return</span> result;&#125;<span class="hljs-built_in">let</span> a = &#123;name: 123,age: 456&#125;<span class="hljs-built_in">let</span> b = deepClone(a)console.log(a,b) <span class="hljs-comment">#&#123;name: 123, age: 456&#125;，&#123;name: 123, age: 456&#125;</span>a.name = 789console.log(a,b) <span class="hljs-comment">#&#123;name: 789, age: 456&#125;，&#123;name: 123, age: 456&#125;</span></code></pre><p>深拷贝的方法还有很多，这个是比较投机取巧的方法，使用这样的办法，可以在数据堆中新增一个Object，解决上面问题，不过在数据量较大时，容易发生栈溢出，不过在数据量较小时，推荐使用</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无缝轮播图</title>
    <link href="/2020/12/05/%E6%97%A0%E7%BC%9D%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
    <url>/2020/12/05/%E6%97%A0%E7%BC%9D%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>轮播图原理如下：<br><img src="/2020/12/05/%E6%97%A0%E7%BC%9D%E8%BD%AE%E6%92%AD%E5%9B%BE/lunbo.png"><br>第四第五步正常来说是不能有延迟的，因为是同一张图<br>代码如下：</p><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><pre><code class="hljs bash">&lt;div id=<span class="hljs-string">&quot;out&quot;</span>&gt;&lt;div id=<span class="hljs-string">&quot;imgbox&quot;</span>&gt;&lt;img src=<span class="hljs-string">&quot;./4.jpg&quot;</span> /&gt;&lt;img src=<span class="hljs-string">&quot;./1.jpg&quot;</span> /&gt;&lt;img src=<span class="hljs-string">&quot;./2.jpg&quot;</span> /&gt;&lt;img src=<span class="hljs-string">&quot;./3.jpg&quot;</span> /&gt;&lt;img src=<span class="hljs-string">&quot;./4.jpg&quot;</span> /&gt;&lt;img src=<span class="hljs-string">&quot;./1.jpg&quot;</span> /&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><h4 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h4><pre><code class="hljs bash"><span class="hljs-comment">#out &#123;</span>position: relative;width: 100px;height: 100px;border: 5px solid lightcoral;overflow: hidden;margin: auto;&#125;<span class="hljs-comment">#imgbox &#123;</span>position: absolute;left: -100px;width: 600px;background-color: lightblue;display: flex;flex-direction: row;&#125;<span class="hljs-comment">#imgbox img &#123;</span>width: 100px;height: 100px;display: block;&#125;</code></pre><h4 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h4><pre><code class="hljs bash"><span class="hljs-built_in">let</span> box = document.getElementById(<span class="hljs-string">&quot;imgbox&quot;</span>)<span class="hljs-built_in">let</span> temp = 0<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">lunbo</span></span>() &#123;<span class="hljs-keyword">if</span> (temp == -500) &#123;temp = -100box.style.transition = <span class="hljs-string">&quot;none&quot;</span>box.style.left = <span class="hljs-string">&quot;-100px&quot;</span>setTimeout(<span class="hljs-function"><span class="hljs-title">function</span></span>()&#123; //这里使用setTimeout是为了执行下面的函数，否则第四第五步会有延迟temp -= 100box.style.left = temp + <span class="hljs-string">&quot;px&quot;</span>box.style.transition = <span class="hljs-string">&quot;all .5s&quot;</span>&#125;,0)&#125; <span class="hljs-keyword">else</span> &#123;temp -= 100box.style.left = temp + <span class="hljs-string">&quot;px&quot;</span>box.style.transition = <span class="hljs-string">&quot;all .5s&quot;</span>&#125;&#125;<span class="hljs-built_in">let</span> act = setInterval(lunbo, 1000)</code></pre>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>Html</tag>
      
      <tag>Css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos部署node+mongodb环境</title>
    <link href="/2020/11/29/centos%E9%83%A8%E7%BD%B2node-mongodb%E7%8E%AF%E5%A2%83/"/>
    <url>/2020/11/29/centos%E9%83%A8%E7%BD%B2node-mongodb%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>最近阿里云服务器过期了，买了其他类型的ESC，所以重新部署了一次后台，再加上上一篇讲的比较初略，所以这次详细讲讲</p><p>这次安装的东西有以下：<br>1、node环境<br>2、mongodb数据库<br>3、用于命令行终端切换的screen</p><h2 id="node环境安装"><a href="#node环境安装" class="headerlink" title="node环境安装"></a>node环境安装</h2><p>首先，安装之前要选好位置，我这里是在默认目录/usr/</p><h3 id="下载node包"><a href="#下载node包" class="headerlink" title="下载node包"></a>下载node包</h3><pre><code class="hljs bash">$ wget https://npm.taobao.org/mirrors/node/v14.13.1/node-v14.13.1-linux-x64.tar.xz<span class="hljs-comment">#（注意当前文件位置，可以通过 pwd 查看当前目录）</span></code></pre><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><pre><code class="hljs bash"><span class="hljs-comment"># xz格式，先用xz解压</span>$ xz -d node-v14.13.1-linux-x64.tar.xz<span class="hljs-comment"># 再用tar解压</span>$ tar xvf node-v14.13.1-linux-x64.tar</code></pre><h3 id="设置环境变量（设置后可直接使用node命令）"><a href="#设置环境变量（设置后可直接使用node命令）" class="headerlink" title="设置环境变量（设置后可直接使用node命令）"></a>设置环境变量（设置后可直接使用node命令）</h3><pre><code class="hljs bash">$ vim ~/.bashrc<span class="hljs-comment"># 在文件末尾添加内容并保存</span>$ <span class="hljs-built_in">export</span> PATH=/usr/<span class="hljs-built_in">local</span>/src/node-v14.13.1-linux-x64/bin:<span class="hljs-variable">$PATH</span><span class="hljs-comment">#（1.输入i进入编辑模式；2.点击esc退出编辑模式，输入“：wq”退出）注意文件位置</span></code></pre><h3 id="使配置生效"><a href="#使配置生效" class="headerlink" title="使配置生效"></a>使配置生效</h3><pre><code class="hljs bash">$ <span class="hljs-built_in">source</span> ~/.bashrc</code></pre><h3 id="查看安装版本"><a href="#查看安装版本" class="headerlink" title="查看安装版本"></a>查看安装版本</h3><pre><code class="hljs bash">$ node -v<span class="hljs-comment"># 若显示v14.13.1则表示安装成功</span></code></pre><h2 id="mongodb数据库安装"><a href="#mongodb数据库安装" class="headerlink" title="mongodb数据库安装"></a>mongodb数据库安装</h2><p>和安装node一样，先找一个安装的目录，我这里还是在/usr/中</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /usr$ wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.0.tgz</code></pre><h3 id="解压、重命名"><a href="#解压、重命名" class="headerlink" title="解压、重命名"></a>解压、重命名</h3><pre><code class="hljs bash">$ tar zxvf mongodb-linux-x86_64-4.0.0.tgz$ mv mongodb-linux-x86_64-4.0.0 mongodb</code></pre><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><pre><code class="hljs bash">$ vim /etc/profile<span class="hljs-comment">#Set Mongodb  添加</span><span class="hljs-built_in">export</span> PATH=/usr/mongodb/bin:<span class="hljs-variable">$PATH</span><span class="hljs-comment">#Set Mongodb over   添加结束</span><span class="hljs-built_in">export</span> PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL  <span class="hljs-comment">#在这一行上面加内容</span></code></pre><h3 id="使环境变量生效"><a href="#使环境变量生效" class="headerlink" title="使环境变量生效"></a>使环境变量生效</h3><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> ~$ <span class="hljs-built_in">source</span> /etc/profile<span class="hljs-comment"># 到这里我们就可以使用mongo了，但是真正使用还要进行一些配置</span></code></pre><h3 id="配置启动"><a href="#配置启动" class="headerlink" title="配置启动"></a>配置启动</h3><h3 id="创建数据库目录"><a href="#创建数据库目录" class="headerlink" title="创建数据库目录"></a>创建数据库目录</h3><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /usr/mongodb$ touch mongodb.conf$ mkdir db$ mkdir <span class="hljs-built_in">log</span>$ <span class="hljs-built_in">cd</span> <span class="hljs-built_in">log</span>$ touch mongodb.log</code></pre><h3 id="修改mongodb配置文件"><a href="#修改mongodb配置文件" class="headerlink" title="修改mongodb配置文件"></a>修改mongodb配置文件</h3><pre><code class="hljs bash">$ vim /usr/mongodb/mongodb.conf<span class="hljs-comment"># 添加以下内容</span>port=27017 <span class="hljs-comment">#端口</span>dbpath= /usr/mongodb/db <span class="hljs-comment">#数据库存文件存放目录</span>logpath= /usr/mongodb/<span class="hljs-built_in">log</span>/mongodb.log <span class="hljs-comment">#日志文件存放路径</span>logappend=<span class="hljs-literal">true</span> <span class="hljs-comment">#使用追加的方式写日志</span>fork=<span class="hljs-literal">true</span> <span class="hljs-comment">#以守护进程的方式运行，创建服务器进程</span>maxConns=100 <span class="hljs-comment">#最大同时连接数</span>noauth=<span class="hljs-literal">true</span> <span class="hljs-comment">#不启用验证</span>journal=<span class="hljs-literal">true</span> <span class="hljs-comment">#每次写入会记录一条操作日志（通过journal可以重新构造出写入的数据）。</span>bind_ip = 0.0.0.0  <span class="hljs-comment">#这样就可外部访问了，例如从win10中去连虚拟机中的MongoDB</span></code></pre><h3 id="设置文件夹权限"><a href="#设置文件夹权限" class="headerlink" title="设置文件夹权限"></a>设置文件夹权限</h3><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /usr/mongodb$ chmod 777 db$ chmod 777 <span class="hljs-built_in">log</span></code></pre><h3 id="启动mongodb"><a href="#启动mongodb" class="headerlink" title="启动mongodb"></a>启动mongodb</h3><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> ~$ mongod --config /usr/mongodb/mongodb.conf<span class="hljs-comment"># 此时我们就可以正常启动数据库了，我们查看一下是否启动成功</span>netstat -apn  | grep 27017</code></pre><p><img src="/2020/11/29/centos%E9%83%A8%E7%BD%B2node-mongodb%E7%8E%AF%E5%A2%83/centos%E9%83%A8%E7%BD%B2node-mongodb%E7%8E%AF%E5%A2%83.png"><br>可以发现运行起来了，但是当我们退出窗口或退出命令，数据库会自动关闭，这时候我们需要将数据库设置成服务进程进行持久化</p><h3 id="配置服务进程"><a href="#配置服务进程" class="headerlink" title="配置服务进程"></a>配置服务进程</h3><h3 id="在-lib-system-目录下新建mongodb-service文件"><a href="#在-lib-system-目录下新建mongodb-service文件" class="headerlink" title="在/lib/system/目录下新建mongodb.service文件"></a>在/lib/system/目录下新建mongodb.service文件</h3><pre><code class="hljs bash">$ vim mongodb.service</code></pre><h3 id="添加如下内容"><a href="#添加如下内容" class="headerlink" title="添加如下内容"></a>添加如下内容</h3><pre><code class="hljs bash">[Unit]Description=mongodbAfter=network.target remote-fs.target nss-lookup.target[Service]Type=forkingExecStart=/usr/mongodb/bin/mongod --config /usr/mongodb/mongodb.confExecReload=/bin/<span class="hljs-built_in">kill</span> -s HUP <span class="hljs-variable">$MAINPID</span>ExecStop=/usr/mongodb/bin/mongod --shutdown --config /usr/mongodb/mongodb.confPrivateTmp=<span class="hljs-literal">true</span>[Install]WantedBy=multi-user.targe</code></pre><h3 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h3><pre><code class="hljs bash">$ chmod 754 mongodb.service</code></pre><h2 id="screen安装"><a href="#screen安装" class="headerlink" title="screen安装"></a>screen安装</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><pre><code class="hljs bash">$ yum install -y screen</code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre><code class="hljs bash">$ screen -ls <span class="hljs-comment"># 查看所有screen</span>$ screen -S &lt;screen-name&gt; <span class="hljs-comment"># 创建screen,并命名 </span>$ ctr + A, D <span class="hljs-comment"># 快捷键,退出当前screen</span>$ screen -r &lt;screen-name&gt; <span class="hljs-comment"># 进入screen </span>$ screen -X quit <span class="hljs-comment"># 删除screen,但没有指定会话 </span>$ screen -X -S [session you want to <span class="hljs-built_in">kill</span>] quit <span class="hljs-comment">#删除screen,指定会话</span>$ screen -wipe <span class="hljs-comment"># 清除dead screens</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>后台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
      <tag>Mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node+Express+Mongodb的后台系统</title>
    <link href="/2020/11/23/Node+Express+Mongodb%E7%9A%84%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F/"/>
    <url>/2020/11/23/Node+Express+Mongodb%E7%9A%84%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="所需配置"><a href="#所需配置" class="headerlink" title="所需配置"></a>所需配置</h3><h4 id="Node-js-Express-Mongodb-奇奇怪怪的插件-Screen"><a href="#Node-js-Express-Mongodb-奇奇怪怪的插件-Screen" class="headerlink" title="Node.js(Express) + Mongodb + 奇奇怪怪的插件 + Screen"></a>Node.js(Express) + Mongodb + 奇奇怪怪的插件 + Screen</h4><p>我的一些同学觉得node做后台很奇怪，其实这个很常见。<br>我一般用Express框架，数据库一般用Mongodb(node中用mongoose插件可以连接mongodb数据库)，<br>有时候面对一些需求使用特定的插件，例如：<br>1.密码加密用bcryptjs<br>2.发送邮箱用nodemailer(可以发邮箱提示用户注册成功)<br>3.token限流用jsonwebtoken(生成token和解码token)<br>……<br>最后部署的时候使用screen可以后台挂载</p><h4 id="详细点击下面的l链接"><a href="#详细点击下面的l链接" class="headerlink" title="详细点击下面的l链接"></a>详细点击下面的l链接</h4><p><a href="https://gitee.com/pearGarden/myappServer">聊天软件后台</a>(除了聊天模块未实现，其他功能都实现了)</p>]]></content>
    
    
    <categories>
      
      <category>后台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
      <tag>Express</tag>
      
      <tag>Mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo部署blog(My First Blog)</title>
    <link href="/2020/11/22/hexo%E9%83%A8%E7%BD%B2blog/"/>
    <url>/2020/11/22/hexo%E9%83%A8%E7%BD%B2blog/</url>
    
    <content type="html"><![CDATA[<p>这是我的第一篇博客，整个Blog系统使用的是<a href="https://hexo.io/">Hexo</a>框架和<a href="https://hexo.fluid-dev.com/docs/">Fluid</a>主题，通过github和gitee的page部署的，接下来我想介绍一下我搭建的过程</p><a id="more"></a><h3 id="所需配置"><a href="#所需配置" class="headerlink" title="所需配置"></a>所需配置</h3><p>1.node环境<br>2.全局安装的hexo<br>3.github或gitee上新建仓库命名为 “&lt;用户名&gt;.github.io”,”&lt;用户名&gt;.gitee.io” 的空项目</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h3><p>新建项目的目录</p><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> 项目目录$ hexo init</code></pre><h3 id="配置-config-yml文件（详细见Hexo官网）"><a href="#配置-config-yml文件（详细见Hexo官网）" class="headerlink" title="配置_config.yml文件（详细见Hexo官网）"></a>配置_config.yml文件（详细见<a href="https://hexo.io/">Hexo</a>官网）</h3><h3 id="安装fluid主题（详细见Fluid官网）"><a href="#安装fluid主题（详细见Fluid官网）" class="headerlink" title="安装fluid主题（详细见Fluid官网）"></a>安装fluid主题（详细见<a href="https://hexo.fluid-dev.com/docs/">Fluid</a>官网）</h3><h3 id="hexo的几个常见操作（详细见Hexo官网）"><a href="#hexo的几个常见操作（详细见Hexo官网）" class="headerlink" title="hexo的几个常见操作（详细见Hexo官网）"></a>hexo的几个常见操作（详细见<a href="https://hexo.io/">Hexo</a>官网）</h3><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。每次上传或修改后必须执行</p><pre><code class="hljs bash">$ hexo clean</code></pre><p>生成静态网站</p><pre><code class="hljs bash">$ hexo generate</code></pre><p>上传至你的服务器或GitHub</p><pre><code class="hljs bash">$ hexo deploy</code></pre><p>启动本地服务器</p><pre><code class="hljs bash">$ hexo server</code></pre>]]></content>
    
    
    <categories>
      
      <category>其它</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
