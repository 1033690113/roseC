<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>centos部署node+mongodb环境</title>
    <link href="/2020/11/29/centos%E9%83%A8%E7%BD%B2node-mongodb%E7%8E%AF%E5%A2%83/"/>
    <url>/2020/11/29/centos%E9%83%A8%E7%BD%B2node-mongodb%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>最近阿里云服务器过期了，买了其他类型的ESC，所以重新部署了一次后台，再加上上一篇讲的比较初略，所以这次详细讲讲</p><p>这次安装的东西有以下：<br>1、node环境<br>2、mongodb数据库<br>3、用于命令行终端切换的screen</p><h2 id="node环境安装"><a href="#node环境安装" class="headerlink" title="node环境安装"></a>node环境安装</h2><p>首先，安装之前要选好位置，我这里是在默认目录/usr/</p><h3 id="下载node包"><a href="#下载node包" class="headerlink" title="下载node包"></a>下载node包</h3><pre><code class="hljs bash">$ wget https://npm.taobao.org/mirrors/node/v14.13.1/node-v14.13.1-linux-x64.tar.xz<span class="hljs-comment">#（注意当前文件位置，可以通过 pwd 查看当前目录）</span></code></pre><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><pre><code class="hljs bash"><span class="hljs-comment"># xz格式，先用xz解压</span>$ xz -d node-v14.13.1-linux-x64.tar.xz<span class="hljs-comment"># 再用tar解压</span>$ tar xvf node-v14.13.1-linux-x64.tar</code></pre><h3 id="设置环境变量（设置后可直接使用node命令）"><a href="#设置环境变量（设置后可直接使用node命令）" class="headerlink" title="设置环境变量（设置后可直接使用node命令）"></a>设置环境变量（设置后可直接使用node命令）</h3><pre><code class="hljs bash">$ vim ~/.bashrc<span class="hljs-comment"># 在文件末尾添加内容并保存</span>$ <span class="hljs-built_in">export</span> PATH=/usr/<span class="hljs-built_in">local</span>/src/node-v14.13.1-linux-x64/bin:<span class="hljs-variable">$PATH</span><span class="hljs-comment">#（1.输入i进入编辑模式；2.点击esc退出编辑模式，输入“：wq”退出）注意文件位置</span></code></pre><h3 id="使配置生效"><a href="#使配置生效" class="headerlink" title="使配置生效"></a>使配置生效</h3><pre><code class="hljs bash">$ <span class="hljs-built_in">source</span> ~/.bashrc</code></pre><h3 id="查看安装版本"><a href="#查看安装版本" class="headerlink" title="查看安装版本"></a>查看安装版本</h3><pre><code class="hljs bash">$ node -v<span class="hljs-comment"># 若显示v14.13.1则表示安装成功</span></code></pre><h2 id="mongodb数据库安装"><a href="#mongodb数据库安装" class="headerlink" title="mongodb数据库安装"></a>mongodb数据库安装</h2><p>和安装node一样，先找一个安装的目录，我这里还是在/usr/中</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /usr$ wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.0.tgz</code></pre><h3 id="解压、重命名"><a href="#解压、重命名" class="headerlink" title="解压、重命名"></a>解压、重命名</h3><pre><code class="hljs bash">$ tar zxvf mongodb-linux-x86_64-4.0.0.tgz$ mv mongodb-linux-x86_64-4.0.0 mongodb</code></pre><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><pre><code class="hljs bash">$ vim /etc/profile<span class="hljs-comment">#Set Mongodb  添加</span><span class="hljs-built_in">export</span> PATH=/usr/mongodb/bin:<span class="hljs-variable">$PATH</span><span class="hljs-comment">#Set Mongodb over   添加结束</span><span class="hljs-built_in">export</span> PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL  <span class="hljs-comment">#在这一行上面加内容</span></code></pre><h3 id="使环境变量生效"><a href="#使环境变量生效" class="headerlink" title="使环境变量生效"></a>使环境变量生效</h3><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> ~$ <span class="hljs-built_in">source</span> /etc/profile<span class="hljs-comment"># 到这里我们就可以使用mongo了，但是真正使用还要进行一些配置</span></code></pre><h3 id="配置启动"><a href="#配置启动" class="headerlink" title="配置启动"></a>配置启动</h3><h3 id="创建数据库目录"><a href="#创建数据库目录" class="headerlink" title="创建数据库目录"></a>创建数据库目录</h3><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /usr/mongodb$ touch mongodb.conf$ mkdir db$ mkdir <span class="hljs-built_in">log</span>$ <span class="hljs-built_in">cd</span> <span class="hljs-built_in">log</span>$ touch mongodb.log</code></pre><h3 id="修改mongodb配置文件"><a href="#修改mongodb配置文件" class="headerlink" title="修改mongodb配置文件"></a>修改mongodb配置文件</h3><pre><code class="hljs bash">$ vim /usr/mongodb/mongodb.conf<span class="hljs-comment"># 添加以下内容</span>port=27017 <span class="hljs-comment">#端口</span>dbpath= /usr/mongodb/db <span class="hljs-comment">#数据库存文件存放目录</span>logpath= /usr/mongodb/<span class="hljs-built_in">log</span>/mongodb.log <span class="hljs-comment">#日志文件存放路径</span>logappend=<span class="hljs-literal">true</span> <span class="hljs-comment">#使用追加的方式写日志</span>fork=<span class="hljs-literal">true</span> <span class="hljs-comment">#以守护进程的方式运行，创建服务器进程</span>maxConns=100 <span class="hljs-comment">#最大同时连接数</span>noauth=<span class="hljs-literal">true</span> <span class="hljs-comment">#不启用验证</span>journal=<span class="hljs-literal">true</span> <span class="hljs-comment">#每次写入会记录一条操作日志（通过journal可以重新构造出写入的数据）。</span>bind_ip = 0.0.0.0  <span class="hljs-comment">#这样就可外部访问了，例如从win10中去连虚拟机中的MongoDB</span></code></pre><h3 id="设置文件夹权限"><a href="#设置文件夹权限" class="headerlink" title="设置文件夹权限"></a>设置文件夹权限</h3><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /usr/mongodb$ chmod 777 db$ chmod 777 <span class="hljs-built_in">log</span></code></pre><h3 id="启动mongodb"><a href="#启动mongodb" class="headerlink" title="启动mongodb"></a>启动mongodb</h3><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> ~$ mongod --config /usr/mongodb/mongodb.conf<span class="hljs-comment"># 此时我们就可以正常启动数据库了，我们查看一下是否启动成功</span>netstat -apn  | grep 27017</code></pre><p><img src="/2020/11/29/centos%E9%83%A8%E7%BD%B2node-mongodb%E7%8E%AF%E5%A2%83/centos%E9%83%A8%E7%BD%B2node-mongodb%E7%8E%AF%E5%A2%83.png"><br>可以发现运行起来了，但是当我们退出窗口或退出命令，数据库会自动关闭，这时候我们需要将数据库设置成服务进程进行持久化</p><h3 id="配置服务进程"><a href="#配置服务进程" class="headerlink" title="配置服务进程"></a>配置服务进程</h3><h3 id="在-lib-system-目录下新建mongodb-service文件"><a href="#在-lib-system-目录下新建mongodb-service文件" class="headerlink" title="在/lib/system/目录下新建mongodb.service文件"></a>在/lib/system/目录下新建mongodb.service文件</h3><pre><code class="hljs bash">$ vim mongodb.service</code></pre><h3 id="添加如下内容"><a href="#添加如下内容" class="headerlink" title="添加如下内容"></a>添加如下内容</h3><pre><code class="hljs bash">[Unit]Description=mongodbAfter=network.target remote-fs.target nss-lookup.target[Service]Type=forkingExecStart=/usr/mongodb/bin/mongod --config /usr/mongodb/mongodb.confExecReload=/bin/<span class="hljs-built_in">kill</span> -s HUP <span class="hljs-variable">$MAINPID</span>ExecStop=/usr/mongodb/bin/mongod --shutdown --config /usr/mongodb/mongodb.confPrivateTmp=<span class="hljs-literal">true</span>[Install]WantedBy=multi-user.targe</code></pre><h3 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h3><pre><code class="hljs bash">$ chmod 754 mongodb.service</code></pre><h2 id="screen安装"><a href="#screen安装" class="headerlink" title="screen安装"></a>screen安装</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><pre><code class="hljs bash">$ yum install -y screen</code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre><code class="hljs bash">$ screen -S yourname -&gt; 新建一个叫yourname的session$ screen -ls -&gt; 列出当前所有的session$ screen -r yourname -&gt; 回到yourname这个session$ screen -d yourname -&gt; 远程detach某个session$ screen -d -r yourname -&gt; 结束当前session并回到yourname这个session</code></pre>]]></content>
    
    
    <categories>
      
      <category>后台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
      <tag>Mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node+Express+Mongodb的后台系统</title>
    <link href="/2020/11/23/Node+Express+Mongodb%E7%9A%84%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F/"/>
    <url>/2020/11/23/Node+Express+Mongodb%E7%9A%84%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="所需配置"><a href="#所需配置" class="headerlink" title="所需配置"></a>所需配置</h3><h4 id="Node-js-Express-Mongodb-奇奇怪怪的插件-Screen"><a href="#Node-js-Express-Mongodb-奇奇怪怪的插件-Screen" class="headerlink" title="Node.js(Express) + Mongodb + 奇奇怪怪的插件 + Screen"></a>Node.js(Express) + Mongodb + 奇奇怪怪的插件 + Screen</h4><p>我的一些同学觉得node做后台很奇怪，其实这个很常见。<br>我一般用Express框架，数据库一般用Mongodb(node中用mongoose插件可以连接mongodb数据库)，<br>有时候面对一些需求使用特定的插件，例如：<br>1.密码加密用bcryptjs<br>2.发送邮箱用nodemailer(可以发邮箱提示用户注册成功)<br>3.token限流用jsonwebtoken(生成token和解码token)<br>……<br>最后部署的时候使用screen可以后台挂载</p><h4 id="详细点击下面的l链接"><a href="#详细点击下面的l链接" class="headerlink" title="详细点击下面的l链接"></a>详细点击下面的l链接</h4><p><a href="https://gitee.com/pearGarden/myappServer">聊天软件后台</a>(除了聊天模块未实现，其他功能都实现了)</p>]]></content>
    
    
    <categories>
      
      <category>后台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
      <tag>Express</tag>
      
      <tag>Mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>First Blog(hexo部署blog)</title>
    <link href="/2020/11/22/first-blog/"/>
    <url>/2020/11/22/first-blog/</url>
    
    <content type="html"><![CDATA[<p>这是我的第一篇博客，整个Blog系统使用的是<a href="https://hexo.io/">Hexo</a>框架和<a href="https://hexo.fluid-dev.com/docs/">Fluid</a>主题，通过github的page部署的，接下来我想介绍一下我搭建的过程</p><a id="more"></a><h3 id="所需配置"><a href="#所需配置" class="headerlink" title="所需配置"></a>所需配置</h3><p>1.node环境<br>2.全局安装的hexo<br>3.github上新建仓库命名为 “&lt;用户名&gt;.githun.io” 的空项目</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h3><p>新建项目的目录</p><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> 项目目录$ hexo init</code></pre><h3 id="配置-config-yml文件（详细见Hexo官网）"><a href="#配置-config-yml文件（详细见Hexo官网）" class="headerlink" title="配置_config.yml文件（详细见Hexo官网）"></a>配置_config.yml文件（详细见<a href="https://hexo.io/">Hexo</a>官网）</h3><h3 id="安装fluid主题（详细见Fluid官网）"><a href="#安装fluid主题（详细见Fluid官网）" class="headerlink" title="安装fluid主题（详细见Fluid官网）"></a>安装fluid主题（详细见<a href="https://hexo.fluid-dev.com/docs/">Fluid</a>官网）</h3><h3 id="hexo的几个常见操作（详细见Hexo官网）"><a href="#hexo的几个常见操作（详细见Hexo官网）" class="headerlink" title="hexo的几个常见操作（详细见Hexo官网）"></a>hexo的几个常见操作（详细见<a href="https://hexo.io/">Hexo</a>官网）</h3><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。每次上传或修改后必须执行</p><pre><code class="hljs bash">$ hexo clean</code></pre><p>生成静态网站</p><pre><code class="hljs bash">$ hexo generate</code></pre><p>上传至你的服务器或GitHub</p><pre><code class="hljs bash">$ hexo deploy</code></pre><p>启动本地服务器</p><pre><code class="hljs bash">$ hexo server</code></pre><h3 id="最后讲讲选择GitHub的原因"><a href="#最后讲讲选择GitHub的原因" class="headerlink" title="最后讲讲选择GitHub的原因"></a>最后讲讲选择GitHub的原因</h3><p>一开始是选择gitee的，但是gitee每次上传都要手动跟新gitee page，所以最后选择了GitHub，GitHub可以自动更新</p>]]></content>
    
    
    <categories>
      
      <category>其它</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
